const mongoose = require('mongoose');

const agingReportSchema = new mongoose.Schema({
  // Report Details
  report_date: {
    type: Date,
    required: true
  },
  store_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Store',
    required: true
  },
  
  // Aging Summary
  aging_summary: {
    new_arrivals: {
      count: { type: Number, default: 0 },
      value: { type: Number, default: 0 }
    },
    fresh_stock: {
      count: { type: Number, default: 0 },
      value: { type: Number, default: 0 }
    },
    slow_moving: {
      count: { type: Number, default: 0 },
      value: { type: Number, default: 0 }
    },
    dead_stock: {
      count: { type: Number, default: 0 },
      value: { type: Number, default: 0 }
    }
  },
  
  // Slow Moving Items
  slow_moving_items: [{
    product_variant_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'ProductVariant'
    },
    product_name: String,
    sku: String,
    days_in_stock: Number,
    current_stock: Number,
    sell_through_rate: Number,
    last_sale_date: Date,
    recommended_action: {
      type: String,
      enum: ['TRANSFER', 'DISCOUNT', 'RETURN_TO_VENDOR', 'NO_ACTION']
    },
    target_store_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Store'
    }
  }],
  
  // Dead Stock Items
  dead_stock_items: [{
    product_variant_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'ProductVariant'
    },
    product_name: String,
    sku: String,
    days_in_stock: Number,
    current_stock: Number,
    last_sale_date: Date,
    recommended_action: {
      type: String,
      enum: ['DISCOUNT_CLEARANCE', 'RETURN_TO_VENDOR', 'TRANSFER', 'WRITE_OFF']
    },
    target_store_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Store'
    }
  }],
  
  // Transfer Recommendations
  transfer_recommendations: [{
    product_variant_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'ProductVariant'
    },
    from_store_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Store'
    },
    to_store_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Store'
    },
    recommended_quantity: Number,
    reason: String,
    priority: {
      type: String,
      enum: ['HIGH', 'MEDIUM', 'LOW']
    }
  }],
  
  // KPIs
  kpis: {
    stock_aging_ratio: Number, // % of stock >90 days
    dead_stock_percentage: Number, // % >180 days
    rotation_success_rate: Number, // % of transferred SKUs sold within 60 days
    average_days_in_stock: Number,
    total_inventory_value: Number
  },
  
  // Generated By
  generated_by: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Timestamps
  created_at: {
    type: Date,
    default: Date.now
  },
  updated_at: {
    type: Date,
    default: Date.now
  }
});

agingReportSchema.pre('save', function(next) {
  this.updated_at = Date.now();
  next();
});

// Indexes
agingReportSchema.index({ report_date: 1, store_id: 1 });
agingReportSchema.index({ store_id: 1, created_at: -1 });
agingReportSchema.index({ generated_by: 1 });

const AgingReport = mongoose.model('AgingReport', agingReportSchema);

module.exports = AgingReport;
